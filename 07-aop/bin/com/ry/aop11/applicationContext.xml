<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">
		
		
		<!-- 当前代码存在的问题  多个bean 如何处理呢-->
		
		<!-- 方法匹配名称切入点 顾问-->
		
		<!-- 注册目标对象 -->
		<bean id="someService" class="com.ry.aop11.someServiceImpl" />
		<bean id="someService2" class="com.ry.aop11.someServiceImpl" />
		
		<!-- 注册切面通知 -->
		<bean id="myAdvice" class="com.ry.aop11.MyAfterReturningAdvice" />
		
		<!-- 注册切面 顾问 -->
		<bean id="myAdvisor" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
			<property name="advice" ref="myAdvice"></property>
			<!-- 指定切入点 -->
			<!-- 还有一个  mappedNames    针对 多个方法 ， value 可以使用通配符-->
			<property name="mappedName"  value="doFirst"></property>
		</bean>
		
		<!-- 生成代理对象 -->
		<bean id="serviceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
			<!-- <property name="targetName" value="someService"></property> -->
			<!-- 指定目标对象 -->
			<property name="target" ref="someService" />
			<!-- 指定切面 -->
			<property name="interceptorNames" value="myAdvisor" />
		</bean>
		
		
		<bean id="serviceProxy2" class="org.springframework.aop.framework.ProxyFactoryBean">
			<!-- <property name="targetName" value="someService"></property> -->
			<!-- 指定目标对象 -->
			<property name="target" ref="someService2" />
			<!-- 指定切面 -->
			<property name="interceptorNames" value="myAdvisor" />
		</bean>
		
		<!-- 当前代码的两个问题
			1、若存在多个目标对象，就需要使用多次proxyFactpryBean来创建对个代理对象，
			这会使配置文件变得臃肿，不便于管理
			2、用户真正想调用的是目标对象，而真正可以调用的却是代理对象, 这不符合正常的逻辑
			以上两个问题 均为proxyFactoryBean 类的功能太简单引起的
			
			可以使用自动代理生成器 来解决此问题
		
		 -->
			
</beans>